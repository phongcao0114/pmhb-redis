// Code generated by MockGen. DO NOT EDIT.
// Source: transactions_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	models "pmhb-redis/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionsService is a mock of TransactionsService interface
type MockTransactionsService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceMockRecorder
}

// MockTransactionsServiceMockRecorder is the mock recorder for MockTransactionsService
type MockTransactionsServiceMockRecorder struct {
	mock *MockTransactionsService
}

// NewMockTransactionsService creates a new mock instance
func NewMockTransactionsService(ctrl *gomock.Controller) *MockTransactionsService {
	mock := &MockTransactionsService{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionsService) EXPECT() *MockTransactionsServiceMockRecorder {
	return m.recorder
}

// GetTransactions mocks base method
func (m *MockTransactionsService) GetTransactions(ctx context.Context, req *models.GetTransactionSrvReq) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", ctx, req)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions
func (mr *MockTransactionsServiceMockRecorder) GetTransactions(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockTransactionsService)(nil).GetTransactions), ctx, req)
}

// InsertTransaction mocks base method
func (m *MockTransactionsService) InsertTransaction(ctx context.Context, req *models.InsertTransactionSrvReq) (models.InsertTransactionSrvRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, req)
	ret0, _ := ret[0].(models.InsertTransactionSrvRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockTransactionsServiceMockRecorder) InsertTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionsService)(nil).InsertTransaction), ctx, req)
}
