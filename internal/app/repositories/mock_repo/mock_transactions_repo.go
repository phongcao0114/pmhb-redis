// Code generated by MockGen. DO NOT EDIT.
// Source: transactions_repo.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "pmhb-redis/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionsRepository is a mock of TransactionsRepository interface
type MockTransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepositoryMockRecorder
}

// MockTransactionsRepositoryMockRecorder is the mock recorder for MockTransactionsRepository
type MockTransactionsRepositoryMockRecorder struct {
	mock *MockTransactionsRepository
}

// NewMockTransactionsRepository creates a new mock instance
func NewMockTransactionsRepository(ctrl *gomock.Controller) *MockTransactionsRepository {
	mock := &MockTransactionsRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionsRepository) EXPECT() *MockTransactionsRepositoryMockRecorder {
	return m.recorder
}

// GetTransaction mocks base method
func (m *MockTransactionsRepository) GetTransaction(ctx context.Context, req models.GetTransactionRepoReq) ([]models.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, req)
	ret0, _ := ret[0].([]models.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockTransactionsRepositoryMockRecorder) GetTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockTransactionsRepository)(nil).GetTransaction), ctx, req)
}

// InsertTransaction mocks base method
func (m *MockTransactionsRepository) InsertTransaction(ctx context.Context, req models.InsertTransactionRepoReq) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockTransactionsRepositoryMockRecorder) InsertTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionsRepository)(nil).InsertTransaction), ctx, req)
}
