// Code generated by MockGen. DO NOT EDIT.
// Source: redisconnector_service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisConnectorService is a mock of RedisConnectorService interface
type MockRedisConnectorService struct {
	ctrl     *gomock.Controller
	recorder *MockRedisConnectorServiceMockRecorder
}

// MockRedisConnectorServiceMockRecorder is the mock recorder for MockRedisConnectorService
type MockRedisConnectorServiceMockRecorder struct {
	mock *MockRedisConnectorService
}

// NewMockRedisConnectorService creates a new mock instance
func NewMockRedisConnectorService(ctrl *gomock.Controller) *MockRedisConnectorService {
	mock := &MockRedisConnectorService{ctrl: ctrl}
	mock.recorder = &MockRedisConnectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisConnectorService) EXPECT() *MockRedisConnectorServiceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockRedisConnectorService) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRedisConnectorServiceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisConnectorService)(nil).Get), ctx, key)
}

// Set mocks base method
func (m *MockRedisConnectorService) Set(ctx context.Context, key string, data interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockRedisConnectorServiceMockRecorder) Set(ctx, key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisConnectorService)(nil).Set), ctx, key, data)
}

// MSet mocks base method
func (m *MockRedisConnectorService) MSet(ctx context.Context, keys, data []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", ctx, keys, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet
func (mr *MockRedisConnectorServiceMockRecorder) MSet(ctx, keys, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockRedisConnectorService)(nil).MSet), ctx, keys, data)
}

// MSetWithExpired mocks base method
func (m *MockRedisConnectorService) MSetWithExpired(ctx context.Context, keys, data []interface{}, seconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSetWithExpired", ctx, keys, data, seconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSetWithExpired indicates an expected call of MSetWithExpired
func (mr *MockRedisConnectorServiceMockRecorder) MSetWithExpired(ctx, keys, data, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSetWithExpired", reflect.TypeOf((*MockRedisConnectorService)(nil).MSetWithExpired), ctx, keys, data, seconds)
}

// SetWithExpired mocks base method
func (m *MockRedisConnectorService) SetWithExpired(ctx context.Context, key string, data interface{}, seconds int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithExpired", ctx, key, data, seconds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithExpired indicates an expected call of SetWithExpired
func (mr *MockRedisConnectorServiceMockRecorder) SetWithExpired(ctx, key, data, seconds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithExpired", reflect.TypeOf((*MockRedisConnectorService)(nil).SetWithExpired), ctx, key, data, seconds)
}

// Delete mocks base method
func (m *MockRedisConnectorService) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRedisConnectorServiceMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisConnectorService)(nil).Delete), ctx, key)
}
